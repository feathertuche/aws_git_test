"""
Cron job to get invoices from the merge and post them to kloo
"""

from INVOICES.helper_functions import format_merge_invoice_data
from INVOICES.queries import get_erp_link_tokens
from INVOICES.serializers import ErpInvoiceSerializer
from merge_integration.helper_functions import api_log
from services.kloo_service import KlooService
from services.merge_service import MergeInvoiceApiService


def main():
    # Get all invoices from merge
    try:
        # merge invoice api service

        # get all completed link tokens
        link_tokens = get_erp_link_tokens({"status": "COMPLETE"})

        for link_token in link_tokens:
            api_log(
                msg=f"CRON-INVOICE : Processing link_token: {link_token.account_token}"
            )

            # Get the invoices from merge
            merge_invoice_api_service = MergeInvoiceApiService(link_token.account_token)
            invoice_response = merge_invoice_api_service.get_invoices()

            if not invoice_response["status"]:
                api_log(msg="CRON-INVOICE : No invoices found in merge")
                continue

            if len(invoice_response["data"].results) == 0:
                api_log(msg="CRON-INVOICE : No invoices found in merge")
                continue

            api_log(
                msg=f"CRON-INVOICE : Processing {len(invoice_response['data'].results)} invoices"
            )

            # format the data to be posted to kloo
            invoices_json = format_merge_invoice_data(
                invoice_response, link_token.id, link_token.org_id
            )

            # validate the data using serializer
            serialized_invoices = ErpInvoiceSerializer(data=invoices_json, many=True)

            if not serialized_invoices.is_valid():
                api_log(
                    msg=f"CRON-INVOICE : Validation Error in Invoice POST cron job: {serialized_invoices.errors}"
                )
                continue

            # save the data to the database
            api_log(msg="CRON-INVOICE : Invoices saving to database")

            kloo_service = KlooService(
                auth_token="eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5NmQyZDIwMS1hMDNjLTQ1NjUtOTA2NC1kOWRmOTEzOWVhZjAiLCJqdGkiOiJmZGRjYjUzYzUzMzM5MWI0ODZkN2UxYWJlNzM4YWNkNjE2NTcwMmUwNDYyZDdjNGVjOTA1Y2YyMTM0NjA5NmE1MzlhZWM4NjQ0ZDMwMGNjZiIsImlhdCI6MTcxMTEwMzU2MS4zMTI4NywibmJmIjoxNzExMTAzNTYxLjMxMjg3MiwiZXhwIjoxNzExMTAzODYxLjMwMzIzLCJzdWIiOiIiLCJzY29wZXMiOlsiKiJdLCJjdXN0b21fY2xhaW0iOiJ7XCJ1c2VyXCI6e1wiaWRcIjpcIjAzZTA0NGFkLTk3YWMtNDU2NS05YWNlLTBlNzFhZWQ3YTM3MFwiLFwiZmlyc3RfbmFtZVwiOlwiTmFiYSBKeW90aVwiLFwibWlkZGxlX25hbWVcIjpudWxsLFwibGFzdF9uYW1lXCI6XCJCb3JhXCIsXCJlbWFpbFwiOlwibmFiYWp5b3RpLmJvcmFoQGdldGtsb28uY29tXCIsXCJiaXJ0aF9kYXRlXCI6XCIxOTk4LTA4LTEyXCIsXCJ1c2VyX2NyZWF0ZWRfYnlcIjpudWxsLFwibG9naW5fYXR0ZW1wdHNcIjowLFwic3RhdHVzXCI6XCJ1bmJsb2NrZWRcIixcImNyZWF0ZWRfYXRcIjpcIjIwMjQtMDMtMDZUMDY6MjA6MDguMDAwMDAwWlwiLFwidXBkYXRlZF9hdFwiOlwiMjAyNC0wMy0xM1QxMTozMzoxOC4wMDAwMDBaXCIsXCJ1c2VyX29yZ19pZFwiOlwiOGNmZmI3OTctYzQyZi00OWU3LTgxMmUtMDFjZmRhMjg3ZGYwXCIsXCJvcmdhbml6YXRpb25faWRcIjpcIjQ1Nzg5M2IzLTliNGEtNDA0NS04NmFkLTY5N2ZmZjdiMzFmOVwiLFwib3JnYW5pemF0aW9uX25hbWVcIjpcIkRldiBJbnRlZ3JhdGlvblwifSxcInNjb3Blc1wiOltcInNldHRpbmctc21hcnQtYXBwcm92YWxzLWNyZWRpdC1ub3Rlcy1yZWFkXCIsXCJjb25maWd1cmF0aW9ucy1vcmdhbmlzYXRpb24tcmVhZFwiLFwiaW52b2ljZS1tYXRjaGluZy1yZWFkXCIsXCJjb25maWd1cmF0aW9ucy1wcmVmaXgtcG8tcmVhZFwiLFwiY3JlZGl0LW5vdGVzLXJlYWRcIixcIi1jb25maWd1cmF0aW9ucy1lbnRpdHktLXJlYWRcIixcImNhcmQtZXhwZW5zZXMtZG93bmxvYWQtcmVhZFwiLFwiY2FyZC1leHBlbnNlcy1tYXJrLWZvci1yZXZpZXctdXBkYXRlXCIsXCJjYXJkLWV4cGVuc2VzLW1hcmstYXMtYXBwcm92ZWQtdXBkYXRlXCIsXCJjYXJkLWV4cGVuc2VzLXNhdmUtYXMtZHJhZnQtdXBkYXRlXCIsXCJwYXltZW50LXJ1bnMtY3JlYXRlXCIsXCJwYXltZW50LXJ1bnMtcmVhZFwiLFwicGF5bWVudC1ydW5zLXVwZGF0ZVwiLFwicGF5bWVudC1ydW5zLWRlbGV0ZVwiLFwic3Vic2NyaXB0aW9uLWNyZWF0ZVwiLFwic3Vic2NyaXB0aW9uLXJlYWRcIixcInN1YnNjcmlwdGlvbi11cGRhdGVcIixcInN1YnNjcmlwdGlvbi1kZWxldGVcIixcInRlc3QtbW9kdWxlLWExLWNyZWF0ZVwiLFwidGVzdC1tb2R1bGUtYTEtcmVhZFwiLFwidGVzdC1tb2R1bGUtYTEtdXBkYXRlXCIsXCJ0ZXN0LW1vZHVsZS1hMS1kZWxldGVcIixcImludm9pY2UtcG8tbWF0Y2hpbmctcmVhZFwiLFwiZGFzaGJvYXJkLWNhcmQtYW5kLWNhcmQtZXhwZW5zZXMtcmVhZFwiLFwiY29uZmlndXJhdGlvbnMtcmVhZFwiLFwic2V0dGluZy1zbWFydC1hcHByb3ZhbHMtY2FyZHMtcmVhZFwiLFwic2V0dGluZy1zbWFydC1hcHByb3ZhbHMtaW52b2ljZXMtcmVhZFwiLFwic2V0dGluZy1zbWFydC1hcHByb3ZhbHMtcHVyY2hhc2Utb3JkZXJzLXJlYWRcIixcInNldHRpbmctc21hcnQtYXBwcm92YWxzLWhpc3RvcnktcmVhZFwiLFwic2V0dGluZy1wYXllZS1tYW5hZ2VtZW50LXJlYWRcIixcInVwZGF0ZS1wZXJtaXNzaW9uLXJldG9vbC10ZXN0LWNyZWF0ZVwiLFwidXBkYXRlLXBlcm1pc3Npb24tcmV0b29sLXRlc3QtcmVhZFwiLFwiZGFzaGJvYXJkLXBvLXJlYWRcIixcInBheWVlLW1hbmFnZW1lbnQtcmVhZFwiLFwicGF5LXZpYS15YXBpbHktcmVhZFwiLFwic2NoZWR1bGUtdGFiLXJlYWRcIixcInVwZGF0ZS1wZXJtaXNzaW9uLXJldG9vbC10ZXN0LXVwZGF0ZVwiLFwic2V0dGluZy1leHBlbnNlLWZpZWxkLWNyZWF0ZVwiLFwic2V0dGluZy1leHBlbnNlLWZpZWxkLXJlYWRcIixcInNldHRpbmctZXhwZW5zZS1maWVsZC11cGRhdGVcIixcInNldHRpbmctZXhwZW5zZS1maWVsZC1kZWxldGVcIixcInNldHRpbmctY3VzdG9tLWV4cGVuc2UtY3JlYXRlXCIsXCJzZXR0aW5nLWN1c3RvbS1leHBlbnNlLXJlYWRcIixcInNldHRpbmctY3VzdG9tLWV4cGVuc2UtdXBkYXRlXCIsXCJzZXR0aW5nLWN1c3RvbS1leHBlbnNlLWRlbGV0ZVwiLFwicGF5bWVudC1ydW5zLXJlYWRcIixcInNldHRpbmctbmV3LXBheWVlLWNvbnRhY3QtcmVhZFwiLFwidGVzdC1tb2R1bGUtYTItY3JlYXRlXCIsXCJ0ZXN0LW1vZHVsZS1hMi1yZWFkXCIsXCJ0ZXN0LW1vZHVsZS1hMi11cGRhdGVcIixcInRlc3QtbW9kdWxlLWEyLWRlbGV0ZVwiLFwic2V0dGluZy1zbWFydC1hcHByb3ZhbHMtaW52b2ljZXMtc2NoZWR1bGUtcmVhZFwiLFwicGF5LW5vdy1idXR0b24tcmVhZFwiLFwic2V0dGluZy1pbnRlZ3JhdGlvbnMtcmVhZFwiLFwic2V0dGluZy1jYXRlZ29yaWVzLXJlYWRcIixcInNldHRpbmctc21hcnQtYXBwcm92YWxzLXJlYWRcIixcInNldHRpbmctYWRkcmVzcy1yZWFkXCIsXCJkYXNoYm9hcmQtcmVhZFwiLFwiYXBwcm92YWxzLXJlYWRcIixcInNldHRpbmctc21hcnQtYXBwcm92YWxzLXN1cHBsaWVyLXJlYWRcIixcImFjY291bnQtZGV0YWlscy1yZWFkXCIsXCJkZWJpdC1hY2NvdW50LWNyZWF0ZVwiLFwiZGViaXQtYWNjb3VudC1yZWFkXCIsXCJkZWJpdC1hY2NvdW50LXVwZGF0ZVwiLFwiZGViaXQtYWNjb3VudC1kZWxldGVcIixcInN0YW5kaW5nLW9yZGVyLWNyZWF0ZVwiLFwic3RhbmRpbmctb3JkZXItcmVhZFwiLFwiaW1tZWRpYXRlLXBheW1lbnQtY3JlYXRlXCIsXCJpbW1lZGlhdGUtcGF5bWVudC1yZWFkXCIsXCJiYW5rLXRyYW5zZmVyLWNyZWF0ZVwiLFwiYmFuay10cmFuc2Zlci1yZWFkXCIsXCJzY2hlZHVsZWQtcmVhZFwiLFwiaGlzdG9yeS1yZWFkXCIsXCJzZXR0aW5nLXNtYXJ0LWFwcHJvdmFscy1wYXltZW50LXJ1bnMtcmVhZFwiLFwiYWxsLWNhcmRzLXJlYWRcIixcIm15LWNhcmRzLXJlYWRcIixcInZpcnR1YWwtY2FyZHMtY3JlYXRlXCIsXCJ2aXJ0dWFsLWNhcmRzLXJlYWRcIixcInZpcnR1YWwtY2FyZHMtdXBkYXRlXCIsXCJ2aXJ0dWFsLWNhcmRzLWRlbGV0ZVwiLFwicGh5c2ljYWwtY2FyZHMtY3JlYXRlXCIsXCJwaHlzaWNhbC1jYXJkcy1yZWFkXCIsXCJwaHlzaWNhbC1jYXJkcy11cGRhdGVcIixcInBoeXNpY2FsLWNhcmRzLWRlbGV0ZVwiLFwiY2FyZC1saW1pdC11cGRhdGVcIixcImNhcmQtbmlja25hbWUtdXBkYXRlXCIsXCJjYW5jZWwtY2FyZC11cGRhdGVcIixcImZyZWV6ZS1jYXJkLXVwZGF0ZVwiLFwidW5mcmVlemUtY2FyZC11cGRhdGVcIixcImNhcmQtc3RhdHVzLXVwZGF0ZVwiLFwiY2FyZC1kb3dubG9hZHMtaW1wb3J0XCIsXCJ1c2Vycy1jcmVhdGVcIixcInVzZXJzLXJlYWRcIixcInVzZXJzLXVwZGF0ZVwiLFwidXNlcnMtZGVsZXRlXCIsXCJpbnZpdGF0aW9uLWxpbmstc2VuZFwiLFwiaGVhbHRoLWNoZWNrLXJlYWRcIixcIm5vdGlmaWNhdGlvbnMtcmVhZFwiLFwib3JnYW5pemF0aW9uLXJlYWRcIixcIm9yZ2FuaXphdGlvbi1tb2R1bHItYWNjb3VudC1yZWFkXCIsXCJ0cmFuc2FjdGlvbnMtY3JlYXRlXCIsXCJ0cmFuc2FjdGlvbnMtcmVhZFwiLFwidHJhbnNhY3Rpb25zLXVwZGF0ZVwiLFwidHJhbnNhY3Rpb25zLWRlbGV0ZVwiLFwidXNlci10cmFuc2FjdGlvbnMtcmVhZFwiLFwib3JnYW5pemF0aW9uLXRyYW5zYWN0aW9ucy1yZWFkXCIsXCJjdXN0b21lci1jcmVhdGVcIixcImNvbXBhbnktcmVhZFwiLFwib3JnYW5pemF0aW9uLWFuYWx5dGljcy1yZWFkXCIsXCJ1c2VyLWFuYWx5dGljcy1yZWFkXCIsXCJjYXJkLXJlcXVlc3RzLXJlYWRcIixcImNhcmQtcmVxdWVzdHMtdXBkYXRlXCIsXCJjYXJkLXJlcXVlc3RzLWRlbGV0ZVwiLFwiY2FyZC1leHBlbnNlcy1jcmVhdGVcIixcImNhcmQtZXhwZW5zZXMtcmVhZFwiLFwiY2FyZC1leHBlbnNlcy11cGRhdGVcIixcImNhcmQtZXhwZW5zZXMtZGVsZXRlXCIsXCJ0ZWFtcy1jcmVhdGVcIixcInRlYW1zLXJlYWRcIixcInRlYW1zLXVwZGF0ZVwiLFwidGVhbXMtZGVsZXRlXCIsXCJjb25maWd1cmF0aW9ucy1wby1yZWFkXCIsXCJzZXR0aW5nLWNhdGVnb3Jpc2F0aW9uLWNlLXJlYWRcIixcInNldHRpbmctY2F0ZWdvcmlzYXRpb24tYXAtcmVhZFwiLFwicGF5ZWUtY29udGFjdC1uby1yZWFkXCIsXCJzZXR0aW5nLWNhdGVnb3Jpc2F0aW9uLXBvLXJlYWRcIixcInRlc3QtbW9kdWxlLWExLWV4cG9ydFwiLFwieGVyby1hbmFseXNpcy1yZWFkXCIsXCJrbG9vLXNwZW5kLXJlYWRcIixcImlzc3VlLWNhcmQtY3JlYXRlXCIsXCJhY3RpdmF0ZS1waHlzaWNhbC1jYXJkLXVwZGF0ZVwiLFwiYW5hbHl0aWNzLWRhc2hib2FyZC1yZWFkXCIsXCJzZXR0aW5nLWNhdGVnb3Jpc2F0aW9uLXJlYWRcIixcInRlc3QtbW9kdWxlLWExLWltcG9ydFwiLFwiZGFzaGJvYXJkLWltLXJlYWRcIixcImNoYXJnZWJlZS1jdXN0b21lci1jcmVhdGVcIixcImNoYXJnZWJlZS1zdWJzY3JpcHRpb24tcmVhZFwiLFwiY2hhcmdlYmVlLWN1c3RvbWVyLWJpbGwtcmVhZFwiLFwiY2hhcmdlYmVlLWludm9pY2UtcmVhZFwiLFwiY2hhcmdlYmVlLW9yZ2FuaXphdGlvbi1zdWJzY3JpcHRpb25zLXJlYWRcIixcImNoYXJnZWJlZS1vcmdhbml6YXRpb24tcmVhZFwiLFwiYXAtaW52b2ljZS1jcmVhdGVcIixcImFwLWludm9pY2UtcmVhZFwiLFwiYXAtaW52b2ljZS11cGRhdGVcIixcInNldHRpbmctcmVhZFwiLFwibmV3LXBheWVlLWNvbnRhY3QtcmVhZFwiLFwiY29uZmlndXJhdGlvbnMtYXV0b21hdGljLWVtYWlsLXBvLXJlYWRcIixcInNjaGVkdWxlLXBheW1lbnQtYnV0dG9uLXJlYWRcIixcIm9yZ2FuaXphdGlvbi1jcmVhdGVcIixcIm9yZ2FuaXphdGlvbi11cGRhdGVcIixcIm9yZ2FuaXphdGlvbi1kZWxldGVcIixcInRlc3QtbW9kdWxlLWEzLWNyZWF0ZVwiLFwicm9sZXMtcmVhZFwiLFwicm9sZXMtdXBkYXRlXCIsXCJyb2xlcy1kZWxldGVcIixcInRocmVzaG9sZC1yZWFkXCIsXCJwdXJjaGFzZS1vcmRlci1jcmVhdGVcIixcInB1cmNoYXNlLW9yZGVyLXJlYWRcIixcInB1cmNoYXNlLW9yZGVyLXVwZGF0ZVwiLFwicGF5ZWUtbWFuYWdlbWVudC1yZWFkLXJlYWRcIixcImNhcmQtZXhwZW5zZXMtcmVhZFwiLFwiY2FyZC1leHBlbnNlcy11cGRhdGVcIixcInRlc3QtbW9kdWxlLWEzLXJlYWRcIixcInByb2ZpbGUtcmVhZFwiLFwicHJvZmlsZS11cGRhdGVcIixcImludm9pY2UtbWF0Y2hpbmctcG8tcmVhZFwiLFwiaW52b2ljZS1tYXRjaGluZy1pbS1yZWFkXCIsXCJjb25maWd1cmF0aW9ucy10YXgtY29kZS1yZWFkXCIsXCJjb25maWd1cmF0aW9ucy1lbnRpdHktcmVhZFwiXSxcInJvbGVcIjp7XCJpZFwiOlwiNmIyNjg0Y2MtMjIzMS0xMWVlLTlkZWYtMGExYzIyYWMyZmE2XCIsXCJuYW1lXCI6XCJPcmdhbmlzYXRpb24gQWRtaW5cIn19In0.mSGVWEwZVopXc8t-uHtXGvwPqtxSAQUT5JQZUpwafeYx0xJTfOBT4iDiJknQnwN5zhTmtuTuob1xQhYQIvqDz9Q5tyaWAyOvNhgIYEjA1wPN5LeEA-TV9V5DTS_Dr-y8qObYoAco7z_V0wM4icFh5Ta8b-5Zfw6gei7jtVic5AEc_5rB11klA7VjbioMS1jpuHmJzV1GlTzeCylZV_bbsfZAY5IZJ-jrUikh_uic-rorsQdwpdXXXCJSbZjzKUk1DhHvzMRdmrxRVXeOWjx8NDde0C-c8x773SvUfGxrMnnP6aR_c3RqJZeO5bcsIvAnHusDjc3ZqHernqORL0l4yIuu_qKoWTGxDjc55QjwFR6oTcKgpFUA4TUnBg7Bha7T0f-SPQo2hpuoWUBgnJBvqfTxMkQ_1UilHXD6kA_rHPB0h3X6BuHlh4oHSoWrO0KT5qcp1Vf42qmGIuMiFx25KQUDIknVYYkvas97GNij8Cp15p4eGaIHDUVA7WfPTIPvsOzmh45VRMVifs2ZFvyzNHUHhy8QSuiMgrJulKAO9Wt0CSaJzgKZ12VKP0ZBX4wdp4vnGaMebUZkQ_34Lm_Dn2c19uwOxiqEGgA3d-FhQK_dSF2MYxeVcvE-CrJSnV4Nc_jw6gMl62v8ZnmPMObqPutl0YkpylIdN-rP1THjONE",
                erp_link_token_id=link_token.id,
            )
            kloo_service.post_invoice_data(invoices_json)

            api_log(msg="CRON-INVOICE : Invoices posted to Kloo")

    except Exception as e:
        api_log(msg=f"CRON-INVOICE : Exception in Invoice POST cron job: {str(e)}")
        return {"status": False, "error": str(e)}
